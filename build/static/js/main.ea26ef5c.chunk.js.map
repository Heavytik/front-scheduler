{
  "version": 3,
  "sources": ["components/Login.jsx", "images/imageService.js", "components/EventView.jsx", "services/login.js", "services/schedules.js", "styleObjects/globalStyles.js", "styleObjects/specialStyles.js", "components/subSettings/SelectImage.jsx", "components/subSettings/SettingsRowEvent.jsx", "components/subSettings/scheduleSettings.jsx", "components/Settings.jsx", "App.jsx", "serviceWorker.js", "index.jsx", "images/freetime.svg", "images/evening.svg", "images/sleep.svg", "images/breakfast.svg", "images/outdoor.svg", "images/playtime.svg", "images/study.svg", "images/food.svg", "images/book.svg"],
  "names": ["useStyles", "makeStyles", "theme", "createStyles", "root", "margin", "spacing", "width", "Login", "username", "password", "handleUsername", "handlePassword", "submit", "classes", "message", "Container", "className", "noValidate", "autoComplete", "onSubmit", "TextField", "id", "value", "onChange", "label", "type", "Button", "variant", "images", "image", "freetime", "evening", "sleep", "breakfast", "outdoor", "playtime", "study", "food", "read", "EventView", "schedule", "imageService", "events", "map", "e", "eventHours", "start", "split", "eventMinutes", "currentDay", "moment", "hour", "minute", "find", "i", "useState", "clock", "setClock", "text", "currentEventState", "setCurrentEventState", "eventIndex", "length", "isAfter", "isBefore", "loopIndex", "isBetween", "findEventIndex", "currentEvent", "format", "subtract", "nextDaysFirstEvent", "add", "nextEvent", "duration", "diff", "timeLeft", "prosentsLeft", "Math", "round", "progress", "useEffect", "myTimer", "setInterval", "clearInterval", "alt", "src", "height", "x1", "y1", "x2", "y2", "style", "stroke", "strokeWidth", "points", "fill", "href", "title", "logIn", "a", "axios", "post", "response", "data", "baseUrl", "token", "getschedules", "config", "headers", "Authorization", "get", "update", "put", "remove", "delete", "setToken", "newToken", "buttonOne", "background", "border", "borderRadius", "boxShadow", "color", "padding", "scheduleSettings", "selected", "display", "flexWrap", "justifyContent", "overflow", "backgroundColor", "palette", "paper", "gridList", "borderStyle", "borderColor", "selectedImage", "SelectImage", "imageNames", "handleClick", "setSelected", "selectImage", "GridList", "cellHeight", "cols", "GridListTile", "key", "ListSubheader", "component", "onClick", "button", "settingsArea", "SettingsRowEvent", "scheduleName", "event", "handleClose", "handleOpen", "handleEventChange", "openDialog", "handleEventRemove", "TableRow", "TableCell", "InputLabelProps", "shrink", "inputProps", "step", "Dialog", "open", "onClose", "aria-labelledby", "aria-describedby", "DialogTitle", "DialogContent", "DialogContentText", "DialogActions", "autoFocus", "scheduleSettings", "scheduleSettingProps", "handlescheduleEditOptions", "handleEditscheduleSubmit", "handleNewEvent", "setscheduleWhereAdd", "setTimeOrder", "imageLabels", "setOpenDialog", "newEventDialogOpen", "setNewEventDialogOpen", "closeNewEventDialog", "extraFunction", "currentEvents", "eventName", "scheduleRows", "eve", "name", "Box", "TableContainer", "Table", "TableHead", "TableBody", "mt", "mb", "newEventName", "handleNewEventName", "fullWidth", "newEventTime", "handleNewEventTime", "FormControl", "handleNewEventImage", "handleAddEventSubmit", "Settings", "settings", "schedulesInEdit", "schedules", "currentschedule", "removeDialogName", "setRemoveDialogName", "isOpenNewschedule", "setIsOpenNewschedule", "isCancel", "handlescheduleCancel", "changescheduleVisibility", "closeRemoveschedule", "openRemoveschedule", "scheduleList", "s", "isOpen", "includes", "isCurrent", "Fragment", "Checkbox", "checked", "handleCurrentschedule", "handlescheduleRemove", "colSpan", "minWidth", "newscheduleName", "handleNewscheduleName", "addNewschedule", "App", "loginUsername", "setLoginUsername", "loginPassword", "setLoginPassword", "user", "setUser", "schedulesDbId", "setschedulesDbId", "setschedules", "originalschedules", "setOriginalschedules", "setCurrentschedule", "setMessage", "setNewscheduleName", "setNewEventName", "setNewEventTime", "newEventImage", "setNewEventImage", "addToschedule", "setAddToschedule", "settingsOpenschedules", "setSettingsOpenschedules", "loggedUserJSON", "window", "localStorage", "getItem", "scheduleJSON", "schedulesInDatabase", "userFromStorage", "JSON", "parse", "scheduleService", "shceludeFromStorage", "shceludesInDatabaseFromStorage", "shortMessage", "msge", "setTimeout", "setLocalStorage", "setItem", "stringify", "loginSubmit", "preventDefault", "logInService", "userFromBackend", "usersschedules", "schedulesInDatabase", "loginMessage", "rearrangedschedule", "schel", "sort", "eve1", "eve2", "saveschedule", "rearrangedschedules", "scheduleToSave", "filter", "newschedules", "concat", "eventText", "target", "newschedulelist", "originalschedule", "emptyschedule", "floor", "random", "users", "weekDays", "scheduleToRemove", "error", "currentscheduleHasEvents", "exception", "Breadcrumbs", "aria-label", "Link", "RouterLink", "to", "removeItem", "Typography", "Alert", "severity", "path", "undefined", "Boolean", "location", "hostname", "match", "ReactDOM", "render", "StrictMode", "document", "getElementById", "navigator", "serviceWorker", "ready", "then", "registration", "unregister", "catch", "console", "module", "exports"],
  "mappings": "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",
  "file": "static/js/main.ea26ef5c.chunk.js",
  "sourcesContent": ["import React from 'react'\nimport { Container, TextField, Button } from '@material-ui/core'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200,\n      },\n    },\n  })\n)\n\nconst Login = ({ username, password, handleUsername, handlePassword, submit, message }) => {\n  const classes = useStyles()\n\n  return (\n    <Container>\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={submit}>\n        <div>\n          <TextField id=\"username\" value={username} onChange={handleUsername} label=\"Username\" />\n        </div>\n        <div>\n          <TextField\n            id=\"password\"\n            value={password}\n            onChange={handlePassword}\n            label=\"Password\"\n            type=\"password\"\n          />\n        </div>\n        <Button variant=\"outlined\" type=\"submit\">\n          Log in\n        </Button>\n      </form>\n    </Container>\n  )\n}\n\nexport default Login\n", "import freetime from './freetime.svg'\nimport evening from './evening.svg'\nimport sleep from './sleep.svg'\nimport breakfast from './breakfast.svg'\nimport outdoor from './outdoor.svg'\nimport playtime from './playtime.svg'\nimport study from './study.svg'\nimport food from './food.svg'\nimport read from './book.svg'\n\nconst images = () => {\n  return [\n    {\n      label: 'freetime',\n      image: freetime,\n    },\n    {\n      label: 'evening',\n      image: evening,\n    },\n    {\n      label: 'sleep',\n      image: sleep,\n    },\n    {\n      label: 'breakfast',\n      image: breakfast,\n    },\n    {\n      label: 'outdoor',\n      image: outdoor,\n    },\n    {\n      label: 'playtime',\n      image: playtime,\n    },\n    {\n      label: 'study',\n      image: study,\n    },\n    {\n      label: 'food',\n      image: food,\n    },\n    {\n      label: 'read',\n      image: read,\n    },\n  ]\n}\n\nexport default images\n", "import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\n\nimport '../App.css'\n\nimport imageService from '../images/imageService'\n\nconst EventView = ({ schedule }) => {\n  const images = imageService()\n\n  const eventsRaw = schedule.events\n  const events = eventsRaw.map((e) => {\n    const eventHours = e.start.split(':')[0]\n    const eventMinutes = e.start.split(':')[1]\n    const currentDay = moment({ hour: eventHours, minute: eventMinutes })\n    return {\n      ...e,\n      start: currentDay,\n      image: images.find((i) => i.label === e.image).image,\n    }\n  })\n\n  const [clock, setClock] = useState(moment())\n  const [currentEventState, setCurrentEventState] = useState({\n    text: 'initialText',\n  })\n\n  const findEventIndex = () => {\n    if (\n      events.length === 1 ||\n      clock.isAfter(events[events.length - 1].start) ||\n      clock.isBefore(events[0].start)\n    ) {\n      return events.length - 1\n    }\n    let loopIndex = 0\n    for (loopIndex = 0; loopIndex < events.length; loopIndex += 1) {\n      if (\n        loopIndex < events.length - 1 &&\n        clock.isBetween(events[loopIndex].start, events[loopIndex + 1].start)\n      ) {\n        return loopIndex\n      }\n    }\n    return 0\n  }\n\n  const eventIndex = findEventIndex()\n\n  let currentEvent = events[eventIndex]\n\n  if (clock.isBefore(events[0].start)) {\n    currentEvent = {\n      ...events[events.length - 1],\n      start: moment(events[events.length - 1].start.format()).subtract(1, 'days'),\n    }\n  }\n\n  const nextDaysFirstEvent = {\n    ...events[0],\n    start: moment(events[0].start.format()).add(1, 'days'),\n  }\n\n  // nextEvent part 1\n  let nextEvent = events[0]\n\n  const isLastEvent = () => eventIndex === events.length - 1\n\n  // nextEvent part 2: check that is last event and next day has NOT begun.\n  if (isLastEvent() && clock.isAfter(events[0].start)) {\n    nextEvent = nextDaysFirstEvent\n\n    // nextEvent part 3: check that first event is past\n  } else if (events[0].start.isBefore(clock)) {\n    nextEvent = events[eventIndex + 1]\n  }\n\n  if (currentEvent.text !== currentEventState.text) {\n    setCurrentEventState(currentEvent)\n  }\n\n  const duration = nextEvent.start.diff(currentEvent.start, 'minutes')\n  const timeLeft = nextEvent.start.diff(clock, 'minutes')\n  const prosentsLeft = Math.round((100 * timeLeft) / duration)\n  const progressBarWidth = 500\n  const progress = Math.round((progressBarWidth * (100 - prosentsLeft)) / 100)\n\n  useEffect(() => {\n    const timer = () => {\n      setClock(moment())\n    }\n    const myTimer = setInterval(timer, 15000)\n    return () => clearInterval(myTimer)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"grid-container\">\n        <div className=\"centered\">\n          <img alt=\"\" src={currentEvent.image} />\n        </div>\n        <div className=\"bigInfo\">\n          <div>{currentEvent.text}</div>\n          <div>{` jäljellä ${timeLeft} min`}</div>\n        </div>\n        <div className=\"centered\">\n          <svg height=\"100\" width=\"500\">\n            <line x1=\"0\" y1=\"50\" x2=\"500\" y2=\"50\" style={{ stroke: 'red', strokeWidth: '2' }} />\n            <line\n              x1=\"0\"\n              y1=\"50\"\n              x2={progress - 20}\n              y2=\"50\"\n              style={{ stroke: 'lime', strokeWidth: '20' }}\n            />\n            <polygon\n              points={`${progress},50 ${progress - 40},90 ${progress - 40},10`}\n              style={{ fill: 'lime', stroke: 'purple', strokeWidth: '1' }}\n            />\n            Sorry, your browser does not support inline SVG.\n          </svg>\n        </div>\n        <div className=\"bigInfo\">\n          {`Seuraavaksi: `}\n          {nextEvent.text}\n        </div>\n      </div>\n      <div className=\"footer\">\n        {`Icons made by  `}\n        <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">\n          Freepik\n        </a>\n        {`  from  `}\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n          www.flaticon.com\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default EventView\n", "import axios from 'axios'\n\nconst logIn = async (username, password) => {\n  const response = await axios.post('/api/login', {\n    username,\n    password,\n  })\n\n  return response.data\n}\n\nexport default { logIn }\n", "import axios from 'axios'\n\nconst baseUrl = '/api/schedules'\n\nlet token = null\n\nconst setToken = (newToken) => {\n  token = `bearer ${newToken}`\n}\n\nconst getschedules = async () => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.get(baseUrl, config)\n  return response.data\n}\n\nconst update = async (schedule) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.put(`${baseUrl}/${schedule.id}`, schedule, config)\n  return response\n}\n\nconst post = async (schedule) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(`${baseUrl}`, schedule, config)\n  return response\n}\n\nconst remove = async (schedule) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.delete(`${baseUrl}/${schedule.id}`, config)\n  return response\n}\n\nexport default { getschedules, update, post, remove, setToken }\n", "// button style\n\nconst buttonOne = {\n  background: 'linear-gradient(60deg, #FFFEEE 20%, #EDDDDE 70%)',\n  border: 1,\n  borderRadius: 3,\n  boxShadow: '0 2px 3px 1px rgba(255, 105, 135, .3)',\n  color: 'black',\n  height: 30,\n  padding: '0 10px',\n  margin: '0px 10px 0px 0px',\n}\n\nexport { buttonOne }\n", "const scheduleSettings = {\n  background: '#E7FAE9',\n  padding: '10px',\n  borderRadius: '3px',\n}\n\nexport { scheduleSettings }\n", "import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport GridList from '@material-ui/core/GridList'\nimport GridListTile from '@material-ui/core/GridListTile'\nimport ListSubheader from '@material-ui/core/ListSubheader'\n\nimport imageService from '../../images/imageService'\n\nconst useStyles = makeStyles((theme, selected) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 500,\n    height: 450,\n  },\n  image: {\n    width: 100,\n    borderStyle: 'solid',\n    borderColor: 'black',\n    borderRadius: '5px',\n  },\n  selectedImage: {\n    width: 100,\n    borderStyle: 'solid',\n    borderColor: 'red',\n    borderRadius: '5px',\n  },\n}))\n\nconst SelectImage = ({ imageNames, handleClick }) => {\n  const classes = useStyles()\n  const images = imageService()\n\n  const [selected, setSelected] = useState('')\n\n  const selectImage = (image) => () => {\n    handleClick(image)\n    setSelected(image)\n  }\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={110} className={classes.gridList} cols={4}>\n        <GridListTile key=\"Subheader\" cols={4} style={{ height: 'auto' }}>\n          <ListSubheader component=\"div\">Images</ListSubheader>\n        </GridListTile>\n        {imageNames.map((image) => (\n          <GridListTile key={image}>\n            {selected === image ? (\n              <img\n                className={classes.selectedImage}\n                src={images.find((i) => i.label === image).image}\n                alt={image}\n                onClick={selectImage(image)}\n              />\n            ) : (\n              <img\n                className={classes.image}\n                src={images.find((i) => i.label === image).image}\n                alt={image}\n                onClick={selectImage(image)}\n              />\n            )}\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  )\n}\n\nexport default SelectImage\n", "import React from 'react'\nimport { Button, TextField, TableCell, TableRow } from '@material-ui/core'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { buttonOne } from '../../styleObjects/globalStyles'\nimport { scheduleSettings } from '../../styleObjects/specialStyles'\n\nconst useStyles = makeStyles({\n  button: buttonOne,\n  settingsArea: scheduleSettings,\n})\n\nconst SettingsRowEvent = ({\n  scheduleName,\n  event,\n  handleClose,\n  handleOpen,\n  handleEventChange,\n  openDialog,\n  handleEventRemove,\n}) => {\n  const classes = useStyles()\n  return (\n    <TableRow key={event.text}>\n      <TableCell>{event.text}</TableCell>\n      <TableCell>\n        <TextField\n          id=\"time\"\n          label=\"Start time\"\n          type=\"time\"\n          value={event.start}\n          onChange={handleEventChange(scheduleName, event.text)}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          inputProps={{\n            step: 300, // 5 min\n          }}\n        />\n      </TableCell>\n      <TableCell>\n        <Button className={classes.button} onClick={handleOpen(event.text)}>\n          -\n        </Button>\n        <Dialog\n          open={openDialog === event.text}\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">{`Delete event ${event.text}`}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              This deletes event permanently.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              className={classes.button}\n              onClick={handleClose(handleEventRemove(scheduleName, event.text))}\n            >\n              Yes\n            </Button>\n            <Button className={classes.button} onClick={handleClose()} autoFocus>\n              Cancel\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nexport default SettingsRowEvent\n", "import React, { useState } from 'react'\nimport {\n  Container,\n  Button,\n  TextField,\n  FormControl,\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@material-ui/core'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { buttonOne } from '../../styleObjects/globalStyles'\nimport { scheduleSettings } from '../../styleObjects/specialStyles'\nimport images from '../../images/imageService'\n\nimport SelectImage from './SelectImage'\nimport SettingsRowEvent from './SettingsRowEvent'\n\nconst useStyles = makeStyles({\n  button: buttonOne,\n  settingsArea: scheduleSettings,\n})\n\nconst scheduleSettings = ({ schedule, scheduleSettingProps, handlescheduleEditOptions }) => {\n  const {\n    handleEditscheduleSubmit,\n    handleEventChange,\n    handleEventRemove,\n    handleNewEvent,\n    setscheduleWhereAdd,\n    setTimeOrder,\n  } = scheduleSettingProps\n  const classes = useStyles()\n\n  const imageLabels = images().map((i) => i.label)\n\n  const [openDialog, setOpenDialog] = useState()\n  const [newEventDialogOpen, setNewEventDialogOpen] = useState(false)\n\n  const openNewEventDialog = (scheduleName) => () => {\n    setNewEventDialogOpen(true)\n    setscheduleWhereAdd(scheduleName)\n  }\n\n  const closeNewEventDialog = (extraFunction = () => {}) => () => {\n    extraFunction()\n    setNewEventDialogOpen(false)\n  }\n  const currentEvents = schedule.events\n\n  const handleOpen = (eventName) => () => {\n    setOpenDialog(eventName)\n  }\n\n  const handleClose = (extraFunction = () => {}) => () => {\n    extraFunction()\n    setOpenDialog()\n  }\n\n  const scheduleRows = currentEvents.map((eve) => {\n    return (\n      <SettingsRowEvent\n        scheduleName={schedule.name}\n        event={eve}\n        handleOpen={handleOpen}\n        handleClose={handleClose}\n        handleEventChange={handleEventChange}\n        openDialog={openDialog}\n        handleEventRemove={handleEventRemove}\n      />\n    )\n  })\n\n  return (\n    <Container className={classes.settingsArea}>\n      <div>\n        <Box>Events</Box>\n        <form onSubmit={handleEditscheduleSubmit(schedule.name)}>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>name</TableCell>\n                  <TableCell>start time</TableCell>\n                  <TableCell>remove event</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {scheduleRows.length > 0 ? (\n                  scheduleRows\n                ) : (\n                  <tr>\n                    <td>You have not any events yet.</td>\n                  </tr>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          <div>\n            <Box mt={1} mb={1}>\n              <Button className={classes.button} onClick={openNewEventDialog(schedule.name)}>\n                + Add new event\n              </Button>\n            </Box>\n            <Dialog\n              open={newEventDialogOpen}\n              onClose={closeNewEventDialog}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <DialogTitle id=\"form-dialog-title\">New event</DialogTitle>\n              <DialogContent>\n                <DialogContentText>Add event name and time to create new event.</DialogContentText>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"text\"\n                  label=\"Event name\"\n                  type=\"text\"\n                  value={handleNewEvent.newEventName}\n                  onChange={handleNewEvent.handleNewEventName}\n                  fullWidth\n                />\n                <p>Start time</p>\n                <TextField\n                  id=\"time\"\n                  label=\"Start time\"\n                  type=\"time\"\n                  value={handleNewEvent.newEventTime}\n                  onChange={handleNewEvent.handleNewEventTime}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  inputProps={{\n                    step: 300, // 5 min\n                  }}\n                />\n                <FormControl>\n                  <SelectImage\n                    imageNames={imageLabels}\n                    handleClick={handleNewEvent.handleNewEventImage}\n                  />\n                </FormControl>\n              </DialogContent>\n              <DialogActions>\n                <Button\n                  className={classes.button}\n                  onClick={closeNewEventDialog(handleNewEvent.handleAddEventSubmit)}\n                >\n                  Add\n                </Button>\n                <Button className={classes.button} onClick={closeNewEventDialog()}>\n                  Cancel\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n          <Box mt={1} mb={1}>\n            <Button className={classes.button} onClick={setTimeOrder(schedule.name)}>\n              Rearrange\n            </Button>\n          </Box>\n          <Box mt={1} mb={1}>\n            <Button className={classes.button} type=\"submit\">\n              Save\n            </Button>\n            <Button\n              className={classes.button}\n              onClick={handlescheduleEditOptions(schedule.name, true)}\n            >\n              Cancel\n            </Button>\n          </Box>\n        </form>\n      </div>\n    </Container>\n  )\n}\n\nexport default scheduleSettings\n", "import React, { useState } from 'react'\nimport {\n  Container,\n  Button,\n  TextField,\n  Checkbox,\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@material-ui/core'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { makeStyles } from '@material-ui/core/styles'\nimport scheduleSettings from './subSettings/scheduleSettings'\nimport { buttonOne } from '../styleObjects/globalStyles'\n\nconst useStyles = makeStyles({\n  button: buttonOne,\n})\n\nconst Settings = ({\n  settings,\n  schedulesInEdit,\n  schedules,\n  currentschedule,\n  scheduleSettingProps,\n}) => {\n  const [removeDialogName, setRemoveDialogName] = useState('')\n  const [isOpenNewschedule, setIsOpenNewschedule] = useState(false)\n\n  const classes = useStyles()\n  const handleOpen = () => setIsOpenNewschedule(true)\n  const handleClose = (extraFunction = () => {}) => () => {\n    extraFunction()\n    setIsOpenNewschedule(false)\n  }\n\n  const handlescheduleEditOptions = (scheduleName, isCancel) => () => {\n    settings.handlescheduleCancel(scheduleName, isCancel)\n    settings.changescheduleVisibility(scheduleName)\n  }\n\n  const setAsCurrentschedule = (scheduleName) => () => {\n    settings.handleCurrentschedule(scheduleName)\n  }\n\n  const closeRemoveschedule = () => setRemoveDialogName('')\n  const openRemoveschedule = (scheduleName) => () => setRemoveDialogName(scheduleName)\n\n  const scheduleList = schedules.map((s) => {\n    const isOpen = schedulesInEdit.includes(s.name)\n    const isCurrent = s.name === currentschedule\n    return (\n      <React.Fragment key={`${s.id}fragment`}>\n        <TableRow key={s.id}>\n          <TableCell>{s.name}</TableCell>\n          <TableCell>\n            <Checkbox\n              checked={isCurrent}\n              variant=\"contained\"\n              onClick={setAsCurrentschedule(s.name)}\n            />\n          </TableCell>\n          <TableCell>\n            <Button className={classes.button} onClick={handlescheduleEditOptions(s.name, isOpen)}>\n              {isOpen ? 'Cancel Edit' : 'Edit'}\n            </Button>\n          </TableCell>\n          <TableCell>\n            <Button className={classes.button} onClick={openRemoveschedule(s.name)}>\n              -\n            </Button>\n            <Dialog\n              open={removeDialogName === s.name}\n              onClose={closeRemoveschedule}\n              aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogTitle id=\"alert-dialog-title\">{`Delete schedule ${s.name}`}</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                  This deletes schedule permanently.\n                </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button className={classes.button} onClick={settings.handlescheduleRemove(s.name)}>\n                  Yes\n                </Button>\n                <Button className={classes.button} onClick={closeRemoveschedule} autoFocus>\n                  Cancel\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </TableCell>\n        </TableRow>\n        {isOpen ? (\n          <TableRow key={`${s.id}edit`}>\n            <TableCell colSpan=\"3\">\n              <scheduleSettings\n                schedule={s}\n                scheduleSettingProps={scheduleSettingProps}\n                handlescheduleEditOptions={handlescheduleEditOptions}\n              />\n            </TableCell>\n          </TableRow>\n        ) : (\n          <></>\n        )}\n      </React.Fragment>\n    )\n  })\n\n  return (\n    <Container>\n      <h2>schedules</h2>\n      <TableContainer>\n        <Table style={{ minWidth: '400px' }}>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <h3>name</h3>\n              </TableCell>\n              <TableCell>\n                <h3>current</h3>\n              </TableCell>\n              <TableCell>\n                <h3>edit</h3>\n              </TableCell>\n              <TableCell>\n                <h3>delete</h3>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{scheduleList}</TableBody>\n        </Table>\n      </TableContainer>\n      <Box mt={1} mb={1}>\n        <Button className={classes.button} onClick={handleOpen}>\n          + Add new schedule\n        </Button>\n      </Box>\n      <Dialog\n        open={isOpenNewschedule}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Add new schedule</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Give a name for schedule and save.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"text\"\n            label=\"schedule name\"\n            type=\"text\"\n            value={settings.newscheduleName}\n            onChange={settings.handleNewscheduleName}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button className={classes.button} onClick={handleClose(settings.addNewschedule)}>\n            Save\n          </Button>\n          <Button className={classes.button} onClick={handleClose()} color=\"primary\" autoFocus>\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  )\n}\n\nexport default Settings\n", "import React, { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Route, Link as RouterLink, Switch } from 'react-router-dom'\nimport { Container, Breadcrumbs, Link, Typography } from '@material-ui/core'\nimport Alert from '@material-ui/lab/Alert'\n\nimport './App.css'\n\nimport Login from './components/Login'\nimport EventView from './components/EventView'\nimport logInService from './services/login'\nimport scheduleService from './services/schedules'\nimport Settings from './components/Settings'\n\nconst App = () => {\n  const [loginUsername, setLoginUsername] = useState('')\n  const [loginPassword, setLoginPassword] = useState('')\n  const [user, setUser] = useState()\n  const [schedulesDbId, setschedulesDbId] = useState([])\n  const [schedules, setschedules] = useState([])\n  const [originalschedules, setOriginalschedules] = useState([])\n  const [currentschedule, setCurrentschedule] = useState('')\n  const [message, setMessage] = useState()\n  const [newscheduleName, setNewscheduleName] = useState('')\n  const [newEventName, setNewEventName] = useState('')\n  const [newEventTime, setNewEventTime] = useState('')\n  const [newEventImage, setNewEventImage] = useState('')\n  const [addToschedule, setAddToschedule] = useState('')\n  const [settingsOpenschedules, setSettingsOpenschedules] = useState([])\n\n  // Try set data from localstorage\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedschedulerAppUser')\n    const scheduleJSON = window.localStorage.getItem('usersschedules')\n    const schedulesInDatabase = window.localStorage.getItem('schedulesDbId')\n    if (loggedUserJSON) {\n      const userFromStorage = JSON.parse(loggedUserJSON)\n      setUser(userFromStorage)\n      scheduleService.setToken(userFromStorage.token)\n    }\n    if (scheduleJSON) {\n      const shceludeFromStorage = JSON.parse(scheduleJSON)\n      setschedules(shceludeFromStorage)\n      if (shceludeFromStorage.length > 0) setCurrentschedule(shceludeFromStorage[0].name)\n    }\n    if (schedulesInDatabase) {\n      const shceludesInDatabaseFromStorage = JSON.parse(schedulesInDatabase)\n      setschedulesDbId(shceludesInDatabaseFromStorage)\n    }\n  }, [])\n\n  const shortMessage = (msge) => {\n    setMessage(msge)\n    setTimeout(() => {\n      setMessage()\n    }, 3000)\n  }\n\n  const setLocalStorage = (user, schedules, schedulesDbId) => {\n    window.localStorage.setItem('loggedschedulerAppUser', JSON.stringify(user))\n    window.localStorage.setItem('usersschedules', JSON.stringify(schedules))\n    window.localStorage.setItem('schedulesDbId', JSON.stringify(schedulesDbId))\n  }\n  const clearLocalStorage = () => {\n    window.localStorage.removeItem('loggedschedulerAppUser')\n    window.localStorage.removeItem('usersschedules')\n    window.localStorage.removeItem('schedulesDbId')\n  }\n\n  const handleLoginUsername = (event) => setLoginUsername(event.target.value)\n  const handleLoginPassword = (event) => setLoginPassword(event.target.value)\n\n  const loginSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      const userFromBackend = await logInService.logIn(loginUsername, loginPassword)\n      scheduleService.setToken(userFromBackend.token)\n      const usersschedules = await scheduleService.getschedules()\n\n      const schedulesInDatabase = usersschedules.map((schedule) => schedule.id)\n      setschedulesDbId(schedulesInDatabase)\n\n      setUser(userFromBackend)\n      setschedules(usersschedules)\n      if (usersschedules.length > 0) setCurrentschedule(usersschedules[0].name)\n\n      setLocalStorage(userFromBackend, usersschedules, schedulesInDatabase)\n\n      setLoginUsername('')\n      setLoginPassword('')\n\n      const loginMessage = {\n        type: 'success',\n        text: `loggend in as ${userFromBackend.username}`,\n      }\n      shortMessage(loginMessage)\n    } catch (exception) {\n      const errorMessage = {\n        type: 'error',\n        text: 'Wrong username or password',\n      }\n      shortMessage(errorMessage)\n    }\n  }\n\n  const logOut = () => {\n    if (user) {\n      setLoginUsername('')\n      setLoginPassword('')\n      setUser()\n      setschedulesDbId([])\n      setschedules([])\n      setOriginalschedules([])\n      setCurrentschedule('')\n      setMessage()\n      setNewscheduleName('')\n      setNewEventName('')\n      setNewEventTime('')\n      setNewEventImage('')\n      setAddToschedule('')\n      setSettingsOpenschedules([])\n      clearLocalStorage()\n    }\n  }\n\n  const rearrangedschedule = (scheduleName) => {\n    return schedules.map((schel) => {\n      if (schel.name === scheduleName)\n        return {\n          ...schel,\n          events: schel.events.sort((eve1, eve2) => {\n            if (eve1.start > eve2.start) return 1\n            return -1\n          }),\n        }\n      return schel\n    })\n  }\n\n  const saveschedule = async (scheduleName) => {\n    const rearrangedschedules = rearrangedschedule(scheduleName)\n\n    const scheduleToSave = schedules.find((schedule) => schedule.name === scheduleName)\n\n    setOriginalschedules(originalschedules.filter((schel) => schel.name !== scheduleName))\n\n    // if schedule is alreay in database then update, otherwise crete new record\n    if (schedulesDbId.find((id) => id === scheduleToSave.id)) {\n      await scheduleService.update(scheduleToSave)\n      window.localStorage.setItem('usersschedules', JSON.stringify(rearrangedschedules))\n      setschedules(rearrangedschedules)\n    } else {\n      const response = await scheduleService.post(scheduleToSave)\n\n      const newschedules = originalschedules.map((schedule) => {\n        if (schedule.id === scheduleToSave.id) return response.data\n        return schedule\n      })\n\n      const schedulesInDatabase = schedulesDbId.concat(response.data.id)\n\n      setschedules(newschedules)\n      setschedulesDbId(schedulesInDatabase)\n\n      setLocalStorage(user, newschedules, schedulesInDatabase)\n    }\n  }\n\n  const scheduleSettingProps = {\n    handleEditscheduleSubmit(scheduleName) {\n      return (event) => {\n        event.preventDefault()\n        saveschedule(scheduleName)\n      }\n    },\n    handleEventChange(scheduleName, eventText) {\n      return (event) => {\n        setschedules(\n          schedules.map((schel) => {\n            if (schel.name === scheduleName) {\n              return {\n                ...schel,\n                events: schel.events.map((eve) =>\n                  eve.text === eventText ? { ...eve, start: event.target.value } : eve\n                ),\n              }\n            }\n            return schel\n          })\n        )\n      }\n    },\n    handleEventRemove(scheduleName, eventText) {\n      return () => {\n        setschedules(\n          schedules.map((schel) => {\n            if (schel.name === scheduleName) {\n              return {\n                ...schel,\n                events: schel.events.filter((eve) => eve.text !== eventText),\n              }\n            }\n            return schel\n          })\n        )\n      }\n    },\n    setscheduleWhereAdd(scheduleName) {\n      setAddToschedule(scheduleName)\n    },\n    handleNewEvent: {\n      newEventName,\n      handleNewEventName(event) {\n        setNewEventName(event.target.value)\n      },\n      newEventTime,\n      handleNewEventTime(event) {\n        setNewEventTime(event.target.value)\n      },\n      newEventImage,\n      handleNewEventImage(image) {\n        setNewEventImage(image)\n      },\n      handleAddEventSubmit() {\n        const newschedulelist = schedules.map((schel) => {\n          if (schel.name === addToschedule) {\n            const newschedule = {\n              ...schel,\n              events: schel.events.concat({\n                text: newEventName,\n                start: newEventTime,\n                image: newEventImage,\n              }),\n            }\n            return newschedule\n          }\n          return schel\n        })\n        setschedules(newschedulelist)\n        setNewEventName('')\n        setNewEventTime('')\n        setNewEventImage('')\n      },\n    },\n    setTimeOrder(scheduleName) {\n      return () => setschedules(rearrangedschedule(scheduleName))\n    },\n  }\n\n  const settings = {\n    newscheduleName,\n    handlescheduleCancel(scheduleName, isCancel) {\n      const originalschedule = originalschedules.find((schel) => schel.name === scheduleName)\n      if (!isCancel) {\n        setOriginalschedules(\n          originalschedules.concat(schedules.find((schel) => schel.name === scheduleName))\n        )\n      } else if (originalschedule) {\n        setschedules(\n          schedules.map((schel) => {\n            if (schel.name === scheduleName) return originalschedule\n            return schel\n          })\n        )\n      }\n    },\n    changescheduleVisibility(scheduleName) {\n      if (settingsOpenschedules.includes(scheduleName)) {\n        setSettingsOpenschedules(settingsOpenschedules.filter((schel) => schel !== scheduleName))\n      } else {\n        setSettingsOpenschedules(settingsOpenschedules.concat(scheduleName))\n      }\n    },\n    handleNewscheduleName(event) {\n      setNewscheduleName(event.target.value)\n    },\n    addNewschedule() {\n      const emptyschedule = {\n        events: [],\n        id: Math.floor(Math.random() * 1000000),\n        name: newscheduleName,\n        users: [user],\n        weekDays: [],\n      }\n      const newschedules = schedules.concat(emptyschedule)\n      setschedules(newschedules)\n      window.localStorage.setItem('usersschedules', JSON.stringify(newschedules))\n      setNewscheduleName('')\n    },\n    handleCurrentschedule(scheduleName) {\n      setCurrentschedule(scheduleName)\n    },\n    handlescheduleRemove(scheduleName) {\n      return () => {\n        const scheduleToRemove = schedules.find((schedule) => schedule.name === scheduleName)\n\n        try {\n          if (schedulesDbId.find((id) => id === scheduleToRemove.id)) {\n            scheduleService.remove(scheduleToRemove)\n            const schedulesInDatabase = schedulesDbId.filter((id) => id !== scheduleToRemove.id)\n            setschedulesDbId(schedulesInDatabase)\n            window.localStorage.setItem('schedulesDbId', JSON.stringify(schedulesInDatabase))\n          }\n          const newschedules = schedules.filter((schel) => schel.name !== scheduleName)\n          setschedules(newschedules)\n          setOriginalschedules(originalschedules.filter((schel) => schel.name !== scheduleName))\n          window.localStorage.setItem('usersschedules', JSON.stringify(newschedules))\n        } catch (error) {\n          shortMessage('something went wrong')\n        }\n      }\n    },\n  }\n\n  let currentscheduleHasEvents = false\n\n  try {\n    currentscheduleHasEvents =\n      currentschedule.length > 0 &&\n      schedules.find((schel) => schel.name === currentschedule).events.length > 0\n  } catch (exception) {\n    currentscheduleHasEvents = false\n  }\n\n  return (\n    <Router>\n      <Breadcrumbs aria-label=\"breadcrumb\" id=\"mainMenu\">\n        <Link component={RouterLink} color=\"inherit\" to=\"/\" onClick={logOut}>\n          {user ? 'Log out' : 'Log in'}\n        </Link>\n        <Link component={RouterLink} color=\"inherit\" to=\"/settings\">\n          Settings\n        </Link>\n        <Link component={RouterLink} color=\"inherit\" to=\"/eventview\">\n          Event View\n        </Link>\n        {user ? (\n          <Typography color=\"textPrimary\">{`user: ${user.username}`}</Typography>\n        ) : (\n          <Typography color=\"textPrimary\">user: (not logged in)</Typography>\n        )}\n      </Breadcrumbs>\n\n      {message ? <Alert severity={message.type}>{message.text}</Alert> : <></>}\n\n      <Container>\n        <Switch>\n          <Route path=\"/eventview\">\n            {schedules !== undefined && currentscheduleHasEvents ? (\n              <EventView schedule={schedules.find((s) => s.name === currentschedule)} />\n            ) : (\n              <Container>You have not any schedules or events</Container>\n            )}\n          </Route>\n          <Route path=\"/settings\">\n            {user !== undefined ? (\n              <Settings\n                settings={settings}\n                schedulesInEdit={settingsOpenschedules}\n                schedules={schedules}\n                scheduleSettingProps={scheduleSettingProps}\n                currentschedule={currentschedule}\n              />\n            ) : (\n              <Container>You have not logged in</Container>\n            )}\n          </Route>\n          <Route path=\"/\">\n            {user !== undefined ? (\n              <Container>{`${user.username} is Logged in!`}</Container>\n            ) : (\n              <Login\n                username={loginUsername}\n                password={loginPassword}\n                handleUsername={handleLoginUsername}\n                handlePassword={handleLoginPassword}\n                submit={loginSubmit}\n                message={message}\n              />\n            )}\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  )\n}\n\nexport default App\n", "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n", "import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n", "module.exports = __webpack_public_path__ + \"static/media/freetime.54cc8934.svg\";", "module.exports = __webpack_public_path__ + \"static/media/evening.899365e8.svg\";", "module.exports = __webpack_public_path__ + \"static/media/sleep.2ff205d3.svg\";", "module.exports = __webpack_public_path__ + \"static/media/breakfast.c45b7f65.svg\";", "module.exports = __webpack_public_path__ + \"static/media/outdoor.e6712652.svg\";", "module.exports = __webpack_public_path__ + \"static/media/playtime.ab902bd6.svg\";", "module.exports = __webpack_public_path__ + \"static/media/study.46ea4ff5.svg\";", "module.exports = __webpack_public_path__ + \"static/media/food.57171403.svg\";", "module.exports = __webpack_public_path__ + \"static/media/book.0d119719.svg\";"],
  "sourceRoot": ""
}